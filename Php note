***PHP***
PHP là ngôn ngữ kịch bản dành cho mục đích chung và phía máy chủ, đặc biệt phù hợp để phát triển web.
PHP có hai ứng dụng chính:
- Kịch bản phía máy chủ – PHP rất phù hợp để phát triển các trang web và ứng dụng web động.
- Tập lệnh dòng lệnh – giống như Python và Perl, bạn có thể chạy tập lệnh PHP từ dòng lệnh để thực hiện các tác vụ quản trị như gửi email và tạo tệp PDF.
- Cú pháp Php:      <?php  ... ?>
- Cấu trúc PHP, tên hàm, tên lớp không phân biệt chữ hoa chữ thường, trong khi các biến phân biệt chữ hoa chữ thường.
- Một câu lệnh kết thúc bằng dấu chấm phẩy (;).
- khoảng trắng và ngắt dòng không quan trọng trong PHP; tận dụng chúng để làm cho mã dễ đọc hơn.

%PHP Variables %
Khi xác định một biến, bạn cần tuân theo các quy tắc sau:
- Tên biến phải bắt đầu bằng ký hiệu đô la ( $).
- Ký tự đầu tiên sau ký hiệu đô la ( $) phải là một chữ cái ( a-z) hoặc dấu gạch dưới ( _).
- Các ký tự còn lại có thể là dấu gạch dưới, chữ cái hoặc số.
VD:
<?php $title = 'code is hard';?>
<?php echo $title; ?></h1>
Cách rút gọn
<?php $title = 'code is hard';?>
<h1><?= $title;?></h1>

-Có thể tách thành 2 file riêng biệt bằng lệnh require

%PHP Constants%
Để xác định một hằng số, bạn sử dụng define() hàm. Hàm define() lấy tên của hằng số làm đối số đầu tiên và giá trị của hằng số làm đối số thứ hai.

VD:
<?php

define('WIDTH','1140px');
echo WIDTH;
^^The const keyword^^

const CONSTANT_NAME = value;

Trong cú pháp này, bạn xác định tên hằng sau consttừ khóa. Để gán một giá trị cho một hằng số, bạn sử dụng toán tử gán (=) và giá trị của hằng số. Giá trị hằng số có thể là vô hướng
Ví dụ: một số, một chuỗi hoặc một mảng.
^^define vs const^^
- the define()là một hàm trong khi the constlà một cấu trúc ngôn ngữ.
VD:
<?php

if(condition)
{
    define('WIDTH', '1140px');
}
không thể sử dụng const từ khóa để xác định hằng số theo cách này. Ví dụ: cú pháp của đoạn mã sau không hợp lệ:

- hàmdefine() cho phép bạn xác định một hằng số có tên xuất phát từ một biểu thức
VD:
<?php

define('PREFIX', 'OPTION');


define(PREFIX . '_1', 1);
define(PREFIX . '_2', 2);
define(PREFIX . '_3', 3);
***Comment PHP***
- là phần quan trọng của mã vì chúng giải thích tại sao mã làm những gì nó phải làm.
- PHP hỗ trợ cả chú thích một dòng và nhiều dòng.
- Nhận xét một dòng bắt đầu bằng # hoặc // .
- Nhận xét nhiều dòng bắt đầu bằng /* và kết thúc bằng */.

***PHP Data type***
PHP có bốn kiểu vô hướng, bốn kiểu hợp chất và hai kiểu đặc biệt.
+ Scalar types(tỷ lệ) : interger(…-3,-2-,-1,0,1,2,3…),float(1.2,1.3,...), boolean(True and false),String('name',...)
+ Compound types(hợp chất):array and object
+ Special types(đặc biệt): null and resource.
PHP type casting cho phép bạn chuyển đổi một giá trị từ kiểu này sang kiểu khác.
VD:
    {
    echo (int)12.9 . '<br>'; // 12
    echo (int)-12.9 . '<br>'; // -12
    }

   {
    $message = 'Hi';
    $num = (int) $message;
    echo $num; // 0
    }
+ Cast to a float:
        {   $amount = (float)100;
            echo $amount; // 100
        }
+ Cast to a string:
        {    $amount = 100;
             echo (string)$amount . " USD"; // 100 USD
        }
Sử dụng toán tử truyền kiểu để truyền một giá trị sang kiểu mong muốn.
PHP là một ngôn ngữ được gõ lỏng lẻo.PHP xác định loại biến dựa trên giá trị.
Khi so sánh các giá trị của các loại khác nhau, PHP ngầm chuyển đổi chúng thành cùng một loại có thể so sánh được.

***OPERATORS***
PHP sử dụng the =để biểu diễn toán tử gán. Sau đây là cú pháp của toán tử gán:

$variable_name = expression;
+ Arithmetic assignment operators: Đôi khi, bạn muốn tăng một biến theo một giá trị cụ thể.
VD:
      {
        $counter = 1;
        $counter = $counter + 1;
      }
+ Concatenation assignment operator: PHP sử dụng toán tử nối (.) để nối hai chuỗi. Ví dụ:
        {
            $greeting = 'Hello ';
            $name = 'John';
        }
        $greeting = $greeting . $name;
        echo $greeting;
%PHP Comparison Operators%
Toán tử so sánh cho phép bạn so sánh hai giá trị và trả về true nếu so sánh là đúng và false ngược lại.
các phép so sánh: ==(tương đương vs), !=,<>(không bằng), ===(giống hệt), !==(không giống vs), >(lớn hơn)
                  >(lơn hơn), >=(lớn hơn bằng), <(nhỏ hơn), <=(nhỏ hơn bằng)
%PHP AND Operator%
+ chấp nhận hai toán hạng và trả về true nếu cả hai toán hạng là true; nếu không, nó sẽ trả về false.
PHP sử dụng and từ khóa để biểu diễn toán tử logic AND:

expression1 and expression2

+ Short-circuiting: Khi giá trị của toán hạng đầu tiên là false, toán tử logic AND biết rằng kết quả cũng phải là false.
Trong trường hợp này, nó không đánh giá toán hạng thứ hai. Quá trình này được gọi là ngắn mạch.
%PHP OR Operator%
+ chấp nhận hai toán hạng và trả về truenếu một trong hai toán hạng là đúng; nếu không, nó sẽ trả về false.

    expression1 or expression2
or
    expression1 || expression2

+ Short-circuiting: Khi toán hạng đầu tiên là true, toán tử logic OR biết rằng kết quả cũng phải là true.
Trong trường hợp này, nó không đánh giá toán hạng thứ hai. Quá trình này được gọi là ngắn mạch.

%PHP NOT operator%
+ trả về true nếu toán hạng là false và trả về falsenếu toán hạng là true.
PHP sử dụng từ khóa both notvà ( !) để biểu diễn toán tử logic NOT.

        not expression
    or

        ! expression

***Control flow***
+ if lệnh thực thi một câu lệnh if mà một điều kiện đánh giá là true.
Luôn sử dụng dấu ngoặc nhọn ngay cả khi bạn có một câu lệnh để thực hiện trong ifcâu lệnh. Nó làm cho mã rõ ràng hơn.
Sử dụng mô hình if ( value == $variable_name ) {}để tránh những sai lầm có thể xảy ra.
+ if else: Sử dụng câu lệnh PHP if...else để thực thi một khối mã khi một điều kiện là true.
+ if else if:- Sử dụng if...else if câu lệnh để đánh giá nhiều biểu thức và thực thi các khối mã theo điều kiện.
            - Chỉ if...else if cú pháp thay thế hỗ trợ, if...else ifkhông.
            - Hãy sử dụng else if bất cứ khi nào có thể để làm cho mã của bạn nhất quán hơn.
+ switch :Sử dụng câu lệnh PHP switch thay vì một loạt ifcâu lệnh trên cùng một biểu thức.
+ for: Sử dụng câu lệnh PHP for để thực thi một khối mã trong một số lần xác định.
+ while: Sử dụng câu lệnh vòng lặp while của PHP để thực thi một khối mã miễn là một điều kiện là đúng.
+ do while: Câu lệnh PHP do...while cho phép bạn thực thi lặp đi lặp lại một khối mã dựa trên biểu thức Boolean.
+ break: Sử dụng break câu lệnh để chấm dứt ngay lập tức việc thực hiện các vòng lặp for, do...while, và while hiện tại.
+ continue: Sử dụng continue câu lệnh để bỏ qua tất cả các câu lệnh theo sau nó và bắt đầu lần lặp tiếp theo từ đầu.

***PHP functions***
function là một khối mã được đặt tên thực hiện một tác vụ cụ thể.

    function function_name() {
        statement;
    }

Sử dụng các chức năng để tạo mã có thể tái sử dụng.
Sử dụng return câu lệnh để trả về một giá trị từ một hàm.

%PHP Function Parameters(Tham số chức năng PHP)***
- Khi gọi concat()hàm, bạn cần truyền hai đối số tương ứng với các tham số
VD:
    function concat($str1, $str2)
    {
    	return $str1 . $str2;
    }

    $greeting = concat('Welcome ', 'Admin');
    echo $greeting;

- Phân tách các tham số bằng dấu phẩy ( ,).
- Theo mặc định, các đối số được truyền theo giá trị trong PHP.
- Thêm các tham số bằng dấu và ( &) để truyền đối số theo tham chiếu.

%PHP Default Parameters(tham số theo hàm mặc định)%
Sử dụng các tham số mặc định để đơn giản hóa việc gọi hàm.
Các tham số mặc định là tùy chọn.

%PHP Named Arguments(đối số)%
Sử dụng Arguments có tên PHP để truyền đối số cho một hàm dựa trên tên tham số.
Đặt Arguments được đặt tên sau các đối số vị trí trong các lời gọi hàm.

%PHP Variable Scopes(Phạm vi biến)%
Trong PHP, các biến có bốn loại phạm vi:Local, Global, Static, Function parameters
+ Local variables: Khi bạn xác định một biến bên trong một hàm , bạn chỉ có thể truy cập biến đó bên trong hàm.
                   Và người ta nói rằng biến là cục bộ của hàm.
+ Global variables: Khi bạn khai báo một biến bên ngoài một hàm, biến đó là toàn cục. Điều đó có nghĩa là bạn
                    có thể truy cập biến ở bất kỳ đâu trong tập lệnh ngoại trừ bên trong một hàm
+ Static variables: Một biến tĩnh giữ lại giá trị của nó giữa các lần gọi hàm. Ngoài ra, một biến tĩnh chỉ có
                    thể truy cập được bên trong hàm. Để xác định một biến tĩnh, bạn sử dụng  static từ khóa.
+ Function parameters: Các tham số chức năng là cục bộ của chức năng. Do đó, các tham số chức năng chỉ có thể
                       được truy cập bên trong chức năng.
%PHP Type Hints%
PHP là một ngôn ngữ được gõ động. Khi bạn định nghĩa một hàm , bạn không cần khai báo kiểu cho các tham số
VD:
    function add($x, $y)
    {
        return $x + $y;
    }

    $result = add(1,2);
    echo $result; // 3

Hàm add()chấp nhận hai đối số và trả về tổng của chúng. Trong ví dụ này, chúng ta truyền hai số nguyên vào
add()hàm và nhận kết quả là một số nguyên.

PHP type hints for function parameters:sẽ kiểm tra loại của một giá trị tại thời điểm gọi và đưa ra TypeError
                                       nếu có sự không phù hợp.
Sử dụng void loại nếu hàm không trả về bất kỳ giá trị nào.
Sử dụng mixed loại hoặc loại kết hợp nếu tham số hàm hoặc hàm trả về giá trị mong đợi trên một số loại.
Để tạo một loại có thể vô hiệu, hãy đặt trước loại đó một dấu chấm hỏi ( ?type).

%PHP strict_types%
cho phép bạn khai báo kiểu cho tham số hàm và giá trị trả về:
VD:

function add(int $x, int $y)
{
    return $x + $y;
}

echo add(1.5, 2.5); // 3
Trong ví dụ này, add()hàm chấp nhận hai số nguyên và trả về tổng của chúng.

- Sử dụng lệnh nghiêm ngặt PHP để kích hoạt chế độ nghiêm ngặt hoặc gõ nghiêm ngặt.
- Ở chế độ nghiêm ngặt, PHP chỉ chấp nhận các giá trị tương ứng với các khai báo kiểu và đưa ra một TypeError ngoại lệ nếu có sự không phù hợp.
- Khi bạn bao gồm mã từ một tệp khác, PHP sẽ sử dụng chế độ của người gọi.
%PHP Variadic(biến đổi) Functions%
function sum(int $x, int $y)
{
    return $x + $y;
}

echo sum(10, 20); // 30

Để cho phép sum()hàm chấp nhận một biến đối số, bạn cần sử dụng func_get_args() hàm. Hàm func_num_args()
trả về một mảng chứa tất cả các đối số của hàm
Sau khi sử dụng func_get_args(). VD:
function sum()
{
    $numbers = func_get_args();
    $total = 0;
    for ($i = 0; $i < count($numbers); $i++) {
        $total += $numbers[$i];
    }

    return $total;
}
echo sum(10, 20) . '<br>'; // 30
echo sum(10, 20, 30) . '<br>'; // 60
func_get_args()trả về một mảng chứa tất cả các đối số. Để tổng hợp tất cả các đối số, chúng tôi sử dụng một for vòng lặp.
- Một hàm matrixdic chấp nhận một số đối số thay đổi.
- Sử dụng ...toán tử để xác định hàm biến thiên.
- Chỉ tham số cuối cùng có thể là biến.
*** Array ***
%How to create array

            <?php

            $empty_array = array();
or
            $empty_array = [];

- Dùng lệnh var_dump(); để hiện thị hàm or dùng lệnh print_r();
- Dùng lệnh $array_name[index] truy cập vào từng phần tử của mảng
- Dùng lệnh $array_name[] = new_element; để thêm 1 phần tử mới vào mảng
- Thay đổi phẩn tử $array_name[index]= new_element
- unset($array_name[index])  dùng để loại bỏ các phần tử trong mảng
- lấy kích thước dùng lệnh count

%Mảng kết hợp Php:
How to use: $html = []; or $html = array();
lệnh foreach: lệnh lặp lại trên tất cả các phần tử trong một mảng, mỗi lần một phần tử.
VD:
        $colors = ['red', 'green', 'blue'];

        foreach ($colors as $color) {
            echo $color . '<br>';
        }
How to use: foreach with mảng kết hợp:(xem thêm trong bài giảng)
      foreach ($array_name as $key => $value) {
         //process element here;
      }

%PHP Multidimensional Array(Mảng đa chiều)
how to use:

 $task=[
        ['like work', 5],
        [' best game ever',6],
        ['good job',2],
        ['study',1],
        ];
    print_r($task);
+Lặp lại các phần tử trong mảng bằng lệnh foreach:
How to use:

    $tasks = [
    	['Learn PHP programming', 2],
    	['Practice PHP', 2],
    	['Work', 8],
    	['Do exercise', 1],
    ];

    foreach ($tasks as $task) {
    	foreach ($task as $task_detail) {
    		echo $task_detail . '<br>';
    	}
result:
        Learn PHP programming
        2
        Practice PHP
        2
        Work
        8
        Do exercise
        1
% PHP array_unshift
- Dùng để thêm 1 hay nhiều phần tử vào đầu mảng
    array_unshift(ten mang,'ten phần tử new');

- Dùng để thêm phần tử vào mảng đa chiều:
    tenmang = ['new phần tử'] +tenmang;
% PHP array_push
- Dùng để thêm 1 hay nhiều phần tử vào cuối mảng
array_push(tenmang,'new phần tử');
- Dùng để thêm 1 hay nhiều phần tử vào cuối mảng kết hợp
tenmang['newphantu'];

% PHP array_pop:
Dùng để xóa phần tử ở cuối mảng và trả về lại phần tử đó
array_pop(tenmang);
%PHP array_shift:
Dùng để xóa phần tử ở đầu mảng và trả về lại nó
arry_shift(tenmang);

%PHP array_key:
Dùng để tìm kiếm các khóa ở trong mảng:
array_key(tenmang,khoa);

%PHP array_key_exist
Dùng để xem khóa có tồn tại ở trong mảng hay ko:
array_exist(khoa cần tìm ,tenmang);

%PHP in_array
Dùng để kiểm tra kết quả ấy có tồn tại trong mảng hay ko:
in_array(giá trị cần tìm , tenmang);

%Php array_merge
Dùng để kết hợp các phần tử trong 2 mảng vs nhau

  mang = array_merge(mang1, mang2)

Nếu phần mang1 bị trùng vs mang2 thì phần tử trong mang1 sẽ ghi đè lên mang2

%PHP array_reverse
Dùng để tạo ra 1 mảng mới có các dữ liệu của mảng cũ nhưng bị đảo ngược các phần tử
new mang = array_reverse(old mang)

%PHP Spread Operator(toán tử trải rộng)
Dùng để hợp nhất 2 mảng bất kì lại thành 1
How to use: ...array_var
EX:
    $before=[4,5];
    $after=[1,2,3,...$before];
    print_r($after);





