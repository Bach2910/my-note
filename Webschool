***Định nghĩa***
HTML ( Hypertext Markup Language) được gọi là ngôn ngữ đánh dấu siêu văn bản. Nó giúp dùng tạo và cấu trúc các thành phần trong trang web hoặc ứng dụng , phân chia các đoạn văn , tạo ra các tiêu đề , liên kết , trích dẫn hình ảnh video , vv…
CSS (Cascading Style Sheet) là ngôn ngữ tạo phong cách cho trang web . Nó dùng để tạo phong cách và định kiểu cho những yếu tố được viết dưới dạng ngôn ngữ đánh dấu , như là HTML

***Công cụ***
Elements chứa tất cả phần tử của website

Styles dùng để hiển thị các thuộc tính CSS của đối tượng mà ta ấn trên phần Elements

Sources để quản lí về ta đang dùng những tài nguyên nào trên website

***Cấu trúc HTML***
Cấu trúc trang HTML : Khai báo định nghĩa <!Doctype html> phải làm đầu tiên khi tạo file

Khai báo thẻ <html> </html> cặp thẻ này chứa tất nội dung website. Trong thẻ<html> sẽ có 2 thẻ là phần đầu <head> và phần thân <body>

Trong thẻ <head> ta sẽ định nghĩa tiêu đề trang web, ta dùng thẻ <title> .... </title>.  Hỗ trợ tiếng việt ta dùng <meta charset="utf-8">

Trong <body> sẽ hiển thị tất cả nội dung ta ghi ở đấy

Ta sẽ dùng <!--  --> ( hoặc Ctrl + / ) để  chú thích trong tệp HTML hoặc vô hiệu hoá những dòng code .

Các thẻ thông dụng trong HTML:
Các thẻ thông dụng thường được dùng trong HTML : 1. thẻ h1 - h6 ( heading :tiêu đề). h1 sẽ được dùng duy nhất 1 thể, h2 h3 h4 ... chữ sẽ nhỏ dần

2. thẻ p (paragarph: đoạn văn) <p> .... </P> ghi đoạn văn muốn hiển thị

3.thẻ imp ( hiển thị hình ảnh) <img src=" " alt=" "> . Trong src ta sẽ ghi link ảnh vào để hiển thị , thẻ alt không bắt buộc ghi

4. thẻ a : thẻ leo liên kết dùng để tới những trang khác, ở href=" " ta ghi link trang muốn đi tới

5. thẻ ul li ( dùng để hiện ra danh sách)

6. thẻ table :  thẻ table sẽ có 2 phần đầu bảng <thead> và thân bảng <tbody>

7. thẻ input

8. button ( nút)

9.div ( tạo khối bao quanh những phần tử khác)

(CSS)

***Các dùng CSS***
Có 3 cách sử dụng CSS: Intenal ,External, Inline

Internal viết luôn vào trong file html ta viết những đoạn CSS vào trong này <style> .. </style>

External ta tạo 1 file mới đặt tên .css ,ta sẽ phải liên kết file css này với file html <link rel ="stylesheet" hrf=" ">

Inline dùng luôn ở trong thẻ,  đưa trực tiếp thuộc tính css vào style =" "

***ID và Class***
Khi bạn không muốn tất cả nội dụng trên website giống nhau thì ta dùng ID : id = " " . Muốn sử dụng selector ID này ta dùng # paste ID vào đấy.

Khi đặt ID phải khác nhau. Muốn sử dụng 1 thuộc tính CSS cho nhiều đối tượng khác nhau ta dùng Class. Ta dùng dấu . để dùng Class trong CSS.

***Độ ưu tiên***
1. Internal ,External : Không có sự ưu tiên giữa 2 cách này mà chỉ ưu tiên xem cái nào được viết mới hơn .

2. tag -1

3. .Class -10

4.#id - 100

5. Inline - 1000

Cái nào nhiều điểm hơn thì sẽ ưu tiên cái đó.

6. Equal specificity : ta gọi được cả class và id .#heading-id.heading class.

7.Universal selector and inherited : Thừa hưởng tất cả trên CSS. Nếu là xét điểm cho Universal thì là 0đ ,tất cả cái trên đều vượt qua được .Inherited(thừa hưởng) thừa hưởng thuộc tính từ thẻ cha.

!important : Đặc biệt ưu tiên .

***Đặt biến***
1. Internal ,External : Không có sự ưu tiên giữa 2 cách này mà chỉ ưu tiên xem cái nào được viết mới hơn .

2. tag -1

3. .Class -10

4.#id - 100

5. Inline - 1000

Cái nào nhiều điểm hơn thì sẽ ưu tiên cái đó.

6. Equal specificity : ta gọi được cả class và id .#heading-id.heading class.

7.Universal selector and inherited : Thừa hưởng tất cả trên CSS. Nếu là xét điểm cho Universal thì là 0đ ,tất cả cái trên đều vượt qua được .Inherited(thừa hưởng) thừa hưởng thuộc tính từ thẻ cha.

!important : Đặc biệt ưu tiên .

***Đơn vị trong CSS***
Absolute units : đơn vị tuyệt đối
+ px
Relative units : đơn vị tương đối
+ % : phụ thuộc vào thẻ nó phụ thuộc
+ rem : phụ thuộc vào HTML
+ em : phụ thuộc vào thẻ gần nhất chứa nó
+ vh : phụ thuộc vào kích thước trình duyệt
+ vw : phụ thuộc vào kích thước trình duyệt

***Chỉnh sửa trong CSS***
%Padding%

padding-top :10px ;

padding-right :10px ;

padding-bottom:10px ;

padding-left :10px ;

Cách viết rút gọn

padding : 10px 12px 8px 6px (Hướng theo chiều kim đồng hồ )


%Border%

Border-width: 10px ;

Border-style: solid (kiểu của khung viền )

Border-color:   ....  (màu của border)

Cách khác:

Border-top-width : 10px

Border-right-width: 10px

.......

Cách viết ngắn hơn: VD:

Border : 10px solid #333  ;


%Margin%

Đẩy elements

margin-left: 10px

margin-top: 10px

Cú pháp viết ngắn:

margin: 10px 20px 30px 40px ;

%Box sizing%
Tạo khoảng cách giữa phần viền và nội dung chữ của bài viết

Cú pháp: box-sizing: border-box ;

Các thuộc tính:

+ border-box: tổng kích thước nằm trong kích thước khai báo

+ content-box: trở về kích thước ban đầu

+ unset: hủy box-sizing

CSS Background-clip

Quyết định xem background được đổ từ đâu

border-box - đổ từ border vào

padding-box : đổ từ padding vào

content-box: đổ từ content vào


Background-image : Đặt ảnh nền

- Cấu trúc: background-image: url( ); (đưa lnik ảnh vào url)

background-size : kích thước ảnh

- Có thể bỏ lặp lại ảnh :

 background-image --> background-repeat: no-repeat;

  + background-repeat: repeat-x; --> lặp lại theo chiều ngang

  + background-repeat: repeat-y; --> lặp lại theo chiều dọc

- Có thể chèn nhiều ảnh: background-image: url(1 ), url(2 );

- url( ) nào viết trước thì ảnh sẽ ở trên

- Background-image: linear-gradient(0, #333, #ccc ); --> tạo dải màu chuyển có hướng xoay (từ 0-360 độ) là 0 độ, màu bắt đầu là #333, điểm cuối của dài màu chuyển là #ccc

- background-size: contain ; (lấy chiều bức ảnh dài nhất (chiều dài hoặc chiều rộng) mà vẫn đảm bảo ảnh, 1 phần ảnh không bị cắt xén hoặc che khuất )

- background-size: cover; (lấy chiều bức ảnh dài nhất (chiều dài hoặc chiều rộng), chấp nhận ảnh 1 phần ảnh bị che khuất)

CSS background-origin

1. Mặc định của background-origin là padding-box (hình ảnh được đổ từ padding)
2. Background-origin: border-box; ( hình ảnh được đổ từ border )
3. Background-origin: content-box; ( background-image chỉ được đổ ở lớp content )

CSS background-position

- Background-position --> cho phép tùy chỉnh vị trí của ảnh nền như: top, bottom, left, right, center

 - Trường hợp chỉ có 1 giá trị, giá trị thứ 2 sẽ được hiểu là center

 +background-position: top; ( ảnh được chỉnh ở vị trí trung tâm phía trên cùng )

 +background-position: 50px; ( ảnh được chỉnh ở vị trí trung tâm trình duyệt và cách mép bề ngang là 50px )

 - Trường hợp kết hợp key word và giá trị tuyệt đối tương đối: background-position: top 20% right 20px; (cách bên trên 20% và phải 20px )

 - Trường hợp chỉ dùng giá trị tuyệt đối hoặc tương đối:

 +background-position: 30px 50px;( dịch chuyển ảnh 30px theo trục ngang sang bên phải, 50px theo trục dọc xuống dưới )

 +background-position: -30px -50px; ( dịch chuyển ảnh 30px theo trục ngang sang bên trái, 50px theo trục dọc lên trên)

***Hàm trong CSS***
- var( ): đặt biến

 - linear-gradient( ): tạo dải chuyển màu

 - rgba( ): tạo color dạng trong suốt

 - rgb( ): tạo màu VD : background : rgb( 0,0,0) ; background : rgb(255,255,255) ;

 - calc( ): tính toán cộng trừ nhân chia với giá trị tuyệt đối và tương đối

 - attr( ): thuộc tính của thẻ html, thường sử dụng kết hợp với lớp giả

***CSS pseudo-classes (lớp giả)***

- Syntax: : tên_lớp_giả

 - :root (tham chiếu tới phần tử gốc của file html )

 - :hover (cho phép định nghĩa vô số thuộc tính css, nhưng thuộc tính chỉ được kích hoạt khi di chuột vào đối tượng đó )

 - :active ( cho phép định nghĩa vô số thuộc tính css, nhưng chỉ được kích hoạt khi bấm và giữ chuột vào đối tượng đó  )

 - :first-child (select đứa con đầu tiên )

 - :last-child (select đứa con cuối cùng )

*** Pseudo-elements (Phần tử giả) ***
Tạo phần tử hiển thị cho website không cần viết mã html chỉ cần viết css ,có content: "    "  ;  thì phần tử giả mới tồn tại được .

 + ::before

 + ::after

 + ::first-letter ->css cho ký tự đầu tiên

 + ::first-line -> css cho dòng đầu tiên

 + <br/> : xuống dòng

 + ::selection (sự lựa chọn) -> css chỉ được kích hoạt khi bôi đen

***CSS Position: Relative***
- Position : ->thiết lập những vị trí hiển thị cho elements trên website với những vị trí đè lên nhau

- Relative: vị trí tương đối không bị phụ thuộc vào đối tượng nào, lấy chính vị trí đang đứng của nó làm gốc tọa độ (nó phụ thuộc vào chính nó)

- Có 4 thuộc tính: top, bottom, left, right

 +top: đẩy đối tượng xuống dưới

 +bottom: đẩy đối tượng lên trên

 +left: đẩy đối tượng sang phải

 +right: đẩy đối tượng sang trái

VD: h1{

 position : relavtive;

 top : 100px ;

left: 100px ;

}
Position

- Relative

- Absolute

- Fixed -> sử dụng cho đối tượng phụ thuộc vào cửa sổ trình duyệt, đối tượng sẽ được cố định trên cửa sổ trình duyệt
            cú pháp: position : fixed ;
- Sticky -> tạo menu, header bám dính
+ Để nó hoạt động phải quy định cho nó: top: 10px ; ( cách mép bằng 10px sẽ dừng lại )

- Absolute --> phụ thuộc thẻ cha gần nhất có thuộc tính position để lấy thẻ cha đó làm gốc toạ độ

Giới thiệu Flexbox

Flexbox: tính linh động, linh hoạt cao , dễ dàng tạo giao diện, bố cục hiển thị trên website

 - Gồm 2 thành phần chính: flex container (thẻ chứa) và flex item (thẻ con trực tiếp của thẻ chứa)

 - 2 trục: main axis và cross axis

 + main axis: trục chính  -> quyết định hướng flex item nằm, nếu main axis nằm chiều dọc thì flex item cũng sẽ theo chiều dọc, main axis theo chiều ngang thì flex item theo chiều ngang

 + cross axis (trục chéo): trục luôn vuông góc với main axis -> quyết định việc lên hay xuống hàng của items

 + main start, main end  -> quyết định items được hiển thị lần lượt theo hướng nào

 + cross start, cross end

 + kích thước của flex item gồm main size: là kích thước có chiều song song với main axis, cross size: kích thước có chiều song song với cross axis

***Các thuộc tính CSS trong Flexbox***
- display: flex | inline-flex    -> quyết định xem có dùng layout flexbox không

 - flex-direction: row | column    -> thay đổi phương hướng của main axis, mặc định có giá trị là row

 - flex-wrap: nowrap (mặc định, không xuống dòng) | wrap (xuống dòng) | wrap-reverse ( thay vì xuống dòng thì items sẽ nhảy lên trên, đảo chiều cross-start và cross-end)

 - flex-basis: <length>   -> set kích thước cho main size

 - justify-content: flex-start | flex-end | center | space-between | space-around      -> căn flex items theo phương của main axis

 - justify-self: flex-start | flex-end | center

 - align-content: flex-start | flex-end | center     ->căn flex items theo phương của cross axis

 - align-self: flex-start | flex-end | center

 - flex-grow: <number>     -> thay đổi kích thước của main size ( lớn lên )

 - flex-shrink: <number>   -> thay đổi kích thước của main size ( thu nhỏ )

 - flex: <number>          -> cú pháp shorthand của flex-basis, flex-grow và flex-shrink

 - order: <number>         -> quyết định thứ tự hiển thị của flex item

 - flex-flow: <number>     ->cú pháp shorthand của flex-direction và flex-wrap






