***Clean code***
Chương 2: Meaningful Names
- Dùng những cái tên chỉ đúng mục đích: Tên của biến hoặc hàm phải trả lời được ý nghĩa
  mục đích của nó, đc dùng để làm j , why, how to use that.

- Tránh sai lệch thông tin: chúng ta phải làm những dấu hiệu cho code trở nên dễ hiểu hơn.
Tránh dùng những từ khác vs nghĩa cố định của nó. Khi code chúng ta nên thay đổi phông chữ
làm cho nó trở lên nổi bật hơn dễ nhận biết hoặc truyền đạt bằng lời nói hoặc để lại tài
liệu cho các lập trình viên sau này có thể hiểu nó

- Những sự khác biệt có ý nghĩa: Ta nên đặt các hàm, các biến rõ ràng để chỉ rõ đc các nguyên
 nhân, mục đích của việc nó. Hạn chế dùng các biến (a1,a2,....aN) những biến dùng ko sai những
 ko rõ đc mục đích cũng như nguyên nhân mình dùng nó. Những từ gây nhiễu là ko cần thiết.

- Dùng những tên phát âm đc: Miễn là cho chúng ta có hiểu đc ý nghĩa của từ ấy, không nhất thiết
 phải dùng các thuật ngữ tiếng anh.

- Dùng những tên tìm kiếm được:lên đặt những tên rõ ràng làm cho người đọc có thể dễ tìm thấy hoặc
khi chúng ta tìm có thể dễ dàng hơn.

- Tránh việc mã hóa: Mã hóa các kiểu dữ liệu hoặc phạm vi thông tin vào tên chỉ đơn giản là thêm
một gánh nặng cho việc giải mã. Đó là một gánh nặng không cần thiết, các tên mã hóa ít khi được
phát âm và dễ bị đánh máy sai.

-Tránh “hiếp râm não” người khác: Không nên đánh đố người khác, để code của mình dễ hiểu hơn cho
mọi người khi đọc code của mình có thể hiểu đc.

-Tên lớp: Tên lớp và các đối tượng nên sử dụng danh từ hoặc cụm danh từ, như Customer, WikiPage,
 Account, và AddressParser. Tránh những từ như Manager, Processor, Data, hoặc Info trong tên của
 một lớp. Tên lớp không nên dùng động từ.

- Tên các phương thức; Tên các phương thức nên có động từ hoặc cụm động từ như postPayment, deletePage,
hoặc save. Các phương thức truy cập, chỉnh sửa thuộc tính phải được đặt tên cùng với get, set và is
theo tiêu chuẩn của Javabean.

- Đừng thể hiện rằng bạn cute: Say what you mean. Mean what you say.

- Chọn một từ cho mỗi khái niệm: Chọn một từ cho một khái niệm và gắn bó với nó. Một từ phù hợp chính là
 một ân huệ cho những lập trình viên phải dùng code của bạn.

- Đừng chơi chữ
- Dùng thuật ngữ
- Thêm ngữ cảnh cho thuật ngữ: Tên ngắn thường tốt hơn tên dài, miễn là chúng rõ ràng. Thêm đủ ngữ cảnh
 cho tên sẽ tốt hơn khi cần thiết.

CHƯƠNG 3
- Các hàm phải càng rút gọn, càng nhỏ gọn.
- Các khổi lệnh, thụt dòng: Điều này có nghĩa là các khối lệnh bên trong câu lệnh if, else, while,… phải
dài một dòng. Các hàm không nên được thiết kế lớn để chứa các cấu trúc lồng nhau, , lời gọi hàm không nên
thụt lề quá mức hai
-Thực hiện MỘT việc: {HÀM CHỈ NÊN THỰC HIỆN MỘT VIỆC. CHÚNG NÊN LÀM TỐT VIỆC ĐÓ, VÀ CHỈ LÀM DUY NHẤT VIỆC ĐÓ}
 để biết hàm đang làm nhiều hơn “một việc” là khi bạn có thể trích xuất một hàm khá từ nó, nhưng với một cái
 tên khác so với chức năng của nó ở trong hàm.
- Mỗi hàm là 1 cấp độ trừu tượng: chúng ta cần chắc chắn rằng các câu lệnh trong hàm của chúng ta đều ở cùng
cấp độ trừu tượng. Việc trộn lẫn các cấp độ trừu tượng với nhau trong một hàm sẽ luôn gây ra những hiểu lầm
cho người đọc
*Đọc code từ trên xuống dưới: Nguyên tắc Stepdown: sẽ làm cho mức độ trừu tượng đc giảm xuống. Nó là chìa khóa
 để đảm bảo các hàm ngắn gọn và giữ cho các chúng làm “một việc”. Làm cho code của bạn đọc như một đoạn văn là
 kỹ thuật hiệu quả để duy trì sự đồng nhất của các cấp trừu tượng.
- Câu lệnh switch: chỉ lên xuất hiện 1 lần được sử dụng để tạo các đối tượng đa hình, và được ẩn đằng sau bằng
tính kế thừa để phần còn lại của hệ thống không nhìn thấy chúng.
- Dùng tên có tính mô tả: Đừng lên ngại đặ tên dài. . Một tên dài nhưng mô tả đầy đủ chức năng của hàm luôn tốt
hơn những cái tên ngắn. Chọn một cái tên có tính mô tả tốt sẽ giúp bạn vẽ lại thiết kế của mô-đun đó vào não,
và việc cải thiện nó sẽ đơn giản hơn
- Đối số của hàm: Số lượng đối số lý tưởng cho một hàm là không (niladic), tiếp đến là một (monadic), sau đó là
hai (dyadic). Nên tránh trường hợp ba đối số (triadic) nếu có thể. Các đối số đầu ra khó hiểu hơn các đối số đầu
vào. Khi chúng ta đọc một hàm, chúng ta quen với ý tưởng thông tin đi vào hàm thông qua các đối số, và kết quả
nhận được thông qua giá trị trả về

*Hình thức chung của hàm một đối số (monadic):
Bạn có thể đặt một câu hỏi đúng - sai cho đối số đó, như boolean fileExists(“MyFile”). Hoặc bạn có thể thao tác
trên đối số đó, biến nó thành một thứ gì khác và trả lại nó. Nhưng có 1 số đối số đặc biệt. Các hàm dạng này có
một đối số đầu vào nhưng không có đối số đầu ra. Toàn bộ chương trình được hiểu là để thông dịch các lời gọi hàm
như một sự kiện, và sử dụng các đối số để thay đổi trạng thái của hệ thống.
*Đối số luận lý:
*Hàm có hai đối số (dyadic):Hàm có hai đối số sẽ khó hiểu hơn hàm có một đối số. Những hàm dyadic không phải là
những con quỷ dữ, và chắc chắn bạn phải viết chúng. Tuy nhiên bạn nên lưu ý rằng bạn sẽ phải trả giá cho việc đó
,và nên tận dụng tối đa những thủ thuật hay lợi thế có sẵn để chuyển chúng về thành dạng monadic.
*Hàm ba đối số (triadic):Hàm có ba đối số khó hiểu hơn nhiều so với hàm hai đối số. Các vấn đề về sắp xếp, tạm ngừng
 và bỏ qua tăng gấp đôi. Tôi đề nghị bạn cẩn thận trước khi tạo ra nó.
*Đối số đối tượng: Khi một hàm có vẻ cần nhiều hơn hai hoặc ba đối số, có khả năng một số đối số đó phải được bao bọc
thành một lớp riêng của chúng.
*Động từ và các từ khóa: Chọn tên tốt cho một hàm có thể góp phần giải thích ý định của hàm và mục đích của các đối số
Trong trường hợp hàm monadic, hàm và đối số nên tạo thành một cặp động từ/danh từ hợp lý.

- Không tác dụng phụ: Tác dụng phụ (hay hiệu ứng lề) là một sự lừa dối. Hàm của bạn được hy vọng sẽ làm một việc, nhưng
nó cũng làm những việc khác mà bạn không thấy. Đôi khi nó bất ngờ làm thay đổi giá trị biến của lớp của nó. Hoặc nó sẽ
biến chúng thành các tham số được truyền vào hàm, hoặc các hàm toàn cục. Trong cả hai trường hợp, chúng tạo ra các sai
lầm và làm sai kết quả.
*Đối số đầu ra: ta nên tránh điều này. Nếu hàm của bạn phải thay đổi trạng thái của một cái gì đó, hãy thay đổi trạng
thái của đối tượng sở hữu nó.

- Tách lệnh truy vấn

- Đừng lặp lại code của bạn: Ta có thể sửa lỗi bằng cách đọc lại code của mình, đây cũng là cách để cải thiện khả năng
đọc của mình

- Lập trình có cấu trúc: bạn có thể tiếp tục giữ cho các hàm của mình nhỏ, thì việc sử dụng các câu lệnh return, break
hay continue là vô hại và đôi khi nó còn giúp hàm của bạn rõ ràng hơn nguyên tắc một lối vào, một lối thoát. Mặt khác,
lệnh goto chỉ có ý nghĩa trong các hàm lớn, vì vậy nên tránh sử dụng nó.

-__Tôi đã viết các hàm này như thế nào?__:
Khi bắt đầu viết các hàm, chúng có thể dài và phức tạp. Rồi ta p thay đổi và tinh chỉnh lại code đó, tách ra thành các hàm, đặt
lại tên và loại bỏ code trùng lặp ,thu nhỏ phương thức và sắp xếp lại chúng. Cuối cùng hoàn thành chúng theo nguyên tắc.

CHƯƠNG 4: CÔM MỪN
- Những điều nên lưu ý: + Đừng dùng comment để làm màu cho code
                        + Giải thích ý nghĩa ngay trong code
                        + Best côm mừn: ( comment pháp lý, commnet cung cấp thông tin, giải thích được mục đích, làm dễ hiểu
                                           , TODO comment, cảnh báo hậu quả, khuếch đại)
                        + not good comment:(not true, bắt buộc, thừa thãi, độc thoại, nhật ký, gây nhiễu, đặc biệt là gây nhiễu)
                        + Đừng dùng comment khi bạn có thể dùng hàm hoặc biến
                        + Đánh dấu lãnh thổ
                        + end comment:
                        + đừng để commnet hóa thành code
                        + HTML commnet
                        + Ko nên để các comment phi tập trung
                        + too much commnet
                        + các quan hệ khó hiểu
                        + Javadocs trong code không công khai
                        + not to Comment làm tiêu đề cho hàm

CHƯƠNG 5: Định dạng code
*Mục đích:
+ nó giúp code của bạn trở nên rõ ràng. Đây phải là vấn đề được ưu tiên giải quyết trước nhất.

* Định dạng theo chiều dọc:
- “Hành code” như nhà báo hành văn:Viết file mã nguồn phải như 1 bài báo cáo. Tên file phải đơn giản nhưng có khả năng giải
thích . Những dòng đầu tiên của code file nguồn sẽ cung cấp các khái niệm và thuật toán. Cuối cùng , ta phải nhìn thấy các
hàm vs mức độ thấp ở cuối file
- Khoảng cách giữa các định nghĩa
- Mật độ theo chiều dọc
- Khoảng cách theo chiều dọc: + Khai báo biến: Các biến nên được khai báo càng gần với nơi sử dụng chúng càng tốt
                              + Các biến instance. Nên được khai báo ở đầu các class, và cũng không nên tạo khoảng
                               cách giữa các biến này vì trong một class được thiết kế tốt, các biến instance được
                               sử dụng bởi nhiều phương thức của class.
                              + Các hàm phụ thuộc nhau. Nếu một hàm gọi một hàm khác, chúng nên được đặt gần nhau.
                              Và nếu có thể, hàm gọi nên ở trên hàm được gọi.
                              + Các định nghĩa có liên quan. Một vài phần của mã nguồn muốn ở gần các phần khác.
                              Chúng có mối liên hệ nhất định. Mối quan hệ càng mạnh thì khoảng cách giữa chúng càng ít.

* Định dạng theo chiều ngang:
- Khoảng cách và mật độ
- Căn chỉnh theo chiều ngang( ko nên lắm)
- Việc lùi đầu dòng: Để làm cho hệ thống này trở nên rõ hơn với người đọc, chúng tôi lùi các dòng code tỉ lệ thuận với
vị trí của chúng trong hệ thống phân cấp.
- Những khoảng trống giả
* Các quy tắc nhóm:
một phần mềm tốt bao gồm một bộ tài liệu được thiết kế tốt và dễ đọc. Chúng cần phải có phong cách nhất quán và trơn tru.
Người đọc tin rằng các định dạng mà họ thấy trong file mã nguồn sẽ có ý nghĩa tương tự ở một nơi khác.
* Các quy tắc định dạng của Uncle Bob:(đọc thêm listing 5-6)

CHƯƠNG 6: Đối tượng và cấu trúc dữ liệu

* Cấu trúc dữ liệu và đối tượng: + Code theo cấu trúc dữ liệu làm bạn khó thêm dữ liệu mới vì phải thay đổi toàn bộ hàm.
                                  Code theo hướng đối tượng làm bạn khó thêm hàm vì phải thay đổi tất cả các class chịu ảnh hưởng.

                                 + Các dòng code sử dụng phương pháp cấu trúc dữ liệu giúp dễ dàng thêm các hàm mới mà không
                                 cần phải thay đổi cấu trúc của dữ liệu hiện tại. Mặt khác, code theo phương pháp hướng đối
                                 tượng giúp dễ dàng thêm các class mới mà không thay đổi các hàm đã viết.

                                 + tưởng đối tượng hóa mọi thứ là chuyện hoang đường. Đôi khi bạn cần các cấu trúc dữ liệu
                                  đơn giản để phát triển các hàm trên chúng.
* The Law of Demeter: Đó là 1 kỹ thuật nói rằng :các đối tượng không nên phơi bày cấu trúc của chúng thông qua các getter/setter
vì việc này làm lộ cấu trúc bên trong nó, điều chúng ta cần làm là ẩn chúng đi.

Trường hợp vi phạm Law of Demeter vì nó gọi hàm getScratchDir() bằng giá trị trả về của getOptions(), và sau đó gọi getAbsolutePath()
bằng giá trị trả về của getScratchDir().
	final String outputDir = ctxt.getOptions().getScratchDir().getAbsolutePath();
+ Train Wrecks:Dạng code này thường được gọi là train wreck (đoàn tàu phế liệu  ) vì nó trông giống như một loạt các toa tàu được ghép lại với nhau
VD:
    Options opts = ctxt.getOptions();
    File scratchDir = opts.getScratchDir();
    final String outputDir = scratchDir.getAbsolutePath();
+ Con lai: Tránh tạo ra vì chúng làm cho viết làm mới , sửa hàm trở lên khó khăn hơn.
+ Ẩn cấu trúc
* Data Transfer Objects:Dạng thuần túy của cấu trúc dữ liệu là một class có các biến public và không có hàm. Dạng này đôi khi được gọi
 là một đối tượng truyền dữ liệu (Data transfer object), hoặc DTO.Là bước đầu tiên trong quá trình chuyển đổi dữ liệu từ cơ sở dữ liệu thành các đối tượng của chương trình.
+ Active Records: Active Record là các hình thức DTO đặc biệt. Chúng là các cấu trúc dữ liệu với các biến public, đôi khi có các phương thức như Save và Find. Thông thường
các Active Record là dữ liệu được gửi trực tiếp từ các bảng trong cơ sở dữ liệu hoặc các nguồn dữ liệu khác.






